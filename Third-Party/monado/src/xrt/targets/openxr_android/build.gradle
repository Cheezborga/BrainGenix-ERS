// Copyright 2020, Collabora, Ltd.
// SPDX-License-Identifier: BSL-1.0

plugins {
    id 'com.android.application'
    id 'kotlin-android'

    id 'com.mikepenz.aboutlibraries.plugin'

    // Hilt dependency injection
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'

    // SVG files in the "raw" resource directory will be transformed into vector drawables of the same name.
    id 'com.quittle.svg-2-android-vector'
}

androidGitVersion {
    tagPattern(/^v[0-9]+.*/)
    codeFormat = 'MNNPPPBBB'
    format = '%tag%%-count%%-gcommit%%-dirty%'
}

def parseOpenXRVersion(def fn) {
    def matches = file(fn).readLines().find {
        it.contains('XR_CURRENT_API_VERSION')
    } =~ ~/XR_MAKE_VERSION\(([^\)]+)\)/
    def components = matches[0][1].split(',').each { it.replace(' ', '').trim() }
    String.join('.', components)
}

project.ext.renameLicense = { String name ->
    def lowerNoExtension = name.toLowerCase().replace(".txt", "")
    def result = lowerNoExtension.replaceAll(~/[\-.]/, "_") + ".txt"
    return result
}

project.ext.filterLicense = {String line ->
    if (line.trim().isEmpty()) {
        return '<br /><br />'
    } else {
        return groovy.xml.XmlUtil.escapeXml(line)
    }
}

// TODO: this copies to the source dir for simplicity right now, but it's not great!
task copyLicenses(type: Copy) {
    from "${rootDir}/LICENSES/"
    include 'BSL-1.0.txt'
    rename(renameLicense)
    into project.layout.projectDirectory.dir('src/main/res/raw').asFile
    filter(filterLicense)
}
project.ext.licenseDir = new File(project.buildDir, 'intermediates/licenses/')

// For JSR250 used by Hilt
task downloadCddl(type: Download) {
    src 'https://spdx.org/licenses/CDDL-1.0.txt'
    dest "${project.licenseDir}/CDDL-1.0.txt"
    overwrite false
}

task copyDownloadedLicenses(type: Copy) {
    from downloadCddl.dest
    rename(renameLicense)
    into project.layout.projectDirectory.dir('src/main/res/raw').asFile
    filter(filterLicense)
    dependsOn downloadCddl
}
android {
    compileSdkVersion project.sharedTargetSdk
    buildToolsVersion '30.0.2'

    ndkVersion "${ndk_version}"

    defaultConfig {
        applicationId 'org.freedesktop.monado.openxr_runtime'
        minSdkVersion project.sharedMinSdk
        targetSdkVersion project.sharedTargetSdk

        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()

        println versionName

        resValue "string", "monado_lib_version", "${versionName}"

        resValue "string", "library_openxrheaders_libraryVersion", parseOpenXRVersion("${rootDir}/src/external/openxr_includes/openxr/openxr.h")

        externalNativeBuild {
            cmake {
                arguments "-DEIGEN3_INCLUDE_DIR=${project.eigenIncludeDir}", "-DANDROID_PLATFORM=26", "-DANDROID_STL=c++_shared", "-DANDROID_ARM_NEON=TRUE"

            }
            if (project.pythonBinary != null) {
                println "Path to Python 3 explicitly specified: ${project.pythonBinary}"
                cmake.arguments "-DPYTHON_EXECUTABLE=${project.pythonBinary}"
            }
        }

        // Be sure to copy over licenses formatted as required.
        preBuild.dependsOn(copyLicenses)
        preBuild.dependsOn(copyDownloadedLicenses)
    }

    buildTypes {
        release {
            minifyEnabled false
            // Gradle plugin produces proguard-android-optimize.txt from @Keep annotations
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "${rootDir}/CMakeLists.txt"
        }
    }

    lintOptions {
        fatal 'StopShip'
    }

    flavorDimensions 'deployment'
    productFlavors {
        inProcess {
            dimension 'deployment'
            applicationIdSuffix '.in_process'
            externalNativeBuild.cmake.arguments += "-DXRT_FEATURE_SERVICE=OFF"
            externalNativeBuild.cmake.targets "openxr_monado"

            resValue "string", "app_name", "Monado XR"
        }
        outOfProcess {
            dimension 'deployment'
            applicationIdSuffix '.out_of_process'
            externalNativeBuild.cmake.arguments += "-DXRT_FEATURE_SERVICE=ON"
            externalNativeBuild.cmake.targets "openxr_monado", "monado-service"

            resValue "string", "app_name", "Monado XR (Out-of-Proc)"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude("META-INF/*.kotlin_module")
    }

}

aboutLibraries {
    configPath = "${projectDir}/config"

    // Full license text for license IDs mentioned here
    // will be included, even if no detected dependency uses them.
    additionalLicenses {
        mit
        mpl_2_0
    }
}

dependencies {
    outOfProcessImplementation project(':src:xrt:ipc:android')
    implementation project(':src:xrt:auxiliary:android')
    implementation project(':src:xrt:targets:android_common')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.constraintlayout:constraintlayout:$androidxConstraintLayoutVersion"
    implementation "com.google.android.material:material:$materialVersion"

    // Dependencies related only to AboutLibraries
    implementation "com.mikepenz:aboutlibraries-core:${latestAboutLibsRelease}"
    implementation "com.mikepenz:aboutlibraries:${latestAboutLibsRelease}"
    implementation "androidx.cardview:cardview:1.*.*"
    implementation "androidx.recyclerview:recyclerview:1.1.*"


    // for Hilt dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

}
