#version 330 core

// Set Outputs
out vec4 FragColor;

// Set Inputs
in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;



// Get Metadata Params
uniform int FrameNumber; // Number of the frame, counts up from zero

uniform float Time; // Time since program started in seconds
uniform float FrameTime; // Render Time Of The Frame

uniform vec2 ViewportRes; // XY Resolution of the viewport
uniform vec3 CameraPosition; // Get Camera XYZ Position



// Get Texture Info
uniform STRUCT_Material Material;

// Get Lighting Info
uniform vec3 Light_Ambient_Color;

uniform vec3 Light_Position;
uniform vec3 Light_Diffuse_Color;
uniform vec3 Light_Specular_Color;





// Light Structs
struct STRUCT_DirectionalLight {

    vec3 Position;

    // Light Color Parameters
    vec3 AmbientColor;
    vec3 DiffuseColor;
    vec3 SpecularColor;

};

struct STRUCT_PointLight {

    // Physical Parameters
    vec3 Position;

    // Light Color Parameters
    vec3 AmbientColor;
    vec3 DiffuseColor;
    vec3 SpecularColor;

    // Light Rolloff Parameters
    float ConstantRolloff;
    float LinearRolloff;
    float QuadraticRolloff;

};

struct STRUCT_SpotLight {

    // Physical Parameters
    vec3 Position;
    vec3 Direction;

    // Light Color Parameters
    vec3 AmbientColor;
    vec3 DiffuseColor;
    vec3 SpecularColor;

    // Light Rolloff Parameters
    float ConstantRolloff;
    float LinearRolloff;
    float QuadraticRolloff;

    // Spotlight Parameters
    float CutOff;
    float OuterCutOff;

};

// Material Handling Structs
struct STRUCT_Material {

    sampler2D Diffuse;
    sampler2D Specular;
    sampler2D Normal;
    sampler2D Height;

    bool HasSpecularMap;
    bool HasNormalMap;
    bool HasHeightMap;

    float SpecularValue; // If set to something other than 0, this will make the target shiny

};

struct STRUCT_SampledData {

    vec4 DiffuseTextureColor;
    vec4 SpecularTextureColor;
    vec4 NormalTextureColor;
    vec4 HeightTextureColor;

}


void main()
{    


    // ---- Extract Texture Vectors, Create SampledData Struct ---- //
    STRUCT_SampledData SampledData;

    SampledColors.DiffuseTextureColor = texture(Material.Diffuse, TexCoords);

    if (Material.HasSpecularMap) {
        SampledColors.SpecularTextureColor = texture(Material.Specular, TexCoords);
    } else {
        SampledColors.SpecularTextureColor = Material.SpecularValue;
    }
    
    if (Material.HasNormalMap) {
        SampledColors.NormalTextureColor = texture(Material.Normal, TexCoords);
    }
    
    if (Material.HasHeightMap) {
        SampledColors.HeightTextureColor = texture(Material.Height, TexCoords);
    }








    // Calculate Texture Components
    vec4 DiffuseColor = texture(texture_diffuse1, TexCoords);
    vec4 SpecularColor = texture(texture_specular1, TexCoords);


    // Ambient Lighting Calculation
    vec3 Light_Ambient_Component = Light_Ambient_Color;


    // Diffuse Lighting Calculation
    vec3 Norm = normalize(Normal);
    vec3 LightDir = normalize(Light_Position - FragPos);

    float AngleDifference = max(dot(Norm, LightDir), 0.0f);
    vec3 Light_Diffuse_Component = AngleDifference * Light_Diffuse_Color;

    
    // Specular Lighting Calculation
    vec3 ViewDirection = normalize(CameraPosition - FragPos);
    vec3 ReflectionDirection = reflect(-LightDir, Norm);

    float Specular = pow(max(dot(ViewDirection, ReflectionDirection), 0.0), 32);
    vec3 Light_Specular_Component = SpecularStrength * Specular * Light_Specular_Color;


    // Generate Color For Fragments Based On TexMaps
    vec3 LightValue = Light_Ambient_Component + Light_Diffuse_Component;
    vec4 FragDiffuseColor = vec4(LightValue, 1.0f) * DiffuseColor;
    
    vec4 FragSpecularColor = vec4(Light_Specular_Component, 1.0f) * SpecularStrength;
    
    FragColor = FragDiffuseColor + FragSpecularColor;
    
}


vec4 CalculateDirectionalLighting(STRUCT_DirectionalLight Light, STRUCT_SampledColors SampledColors, vec3 Normal, vec3 ViewDirection) {



}




