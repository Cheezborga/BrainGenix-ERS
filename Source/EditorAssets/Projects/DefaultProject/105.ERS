#version 330 core

// Set Outputs
out vec4 FragColor;

// Set Inputs
in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;


// Get Metadata Params
uniform float Time; // Time since program started in seconds
uniform float FrameTime; // Render Time Of The Frame
uniform int FrameNumber; // Number of the frame, counts up from zero
uniform vec2 ViewportRes; // XY Resolution of the viewport
uniform vec3 CameraPosition; // Get Camera XYZ Position

// Get Texture Info
uniform sampler2D texture_diffuse1;

// Get Lighting Info
uniform vec3 Light_Ambient_Color;

uniform vec3 Light_Position;
uniform vec3 Light_Diffuse_Color;
uniform vec3 Light_Specular_Color;


float SpecularStrength = 1.0f;


void main()
{    
    
    // Ambient Lighting Calculation
    vec3 Light_Ambient_Component = Light_Ambient_Color;
    
    // Diffuse Lighting Calculation
    vec3 Norm = normalize(Normal);
    vec3 LightDir = normalize(Light_Position - FragPos);

    float AngleDifference = max(dot(Norm, LightDir), 0.0f);
    vec3 Light_Diffuse_Component = AngleDifference * Light_Diffuse_Color;
    
    // Specular Lighting Calculation
    vec3 ViewDirection = normalize(CameraPosition - FragPos);
    vec3 ReflectionDirection = reflect(-LightDir, Norm);
    float Specular = pow(max(dot(ViewDirection, ReflectionDirection), 0.0), 32);
    vec3 Light_Specular_Component = SpecularStrength * Specular * Light_Specular_Color;
    
    // Generate Color For Fragment
    vec4 TextureColor = texture(texture_diffuse1, TexCoords);
    vec3 LightValue = Light_Ambient_Component + Light_Diffuse_Component + Light_Specular_Component;
    FragColor = vec4(LightValue, 1.0f) * TextureColor;
    
}




